set ratios 1:2:3
# set cleaner ~/.config/lf/cleaner
#https://www.youtube.com/watch?v=n7lYxXrzbjk Basic Settings
set preview true
set previewer ~/.config/lf/scope
# set previewer ~/.config/lf/preview
# set cleaner ~/.config/lf/cleaner
#set color256 true
# set drawbox true
set icons true
# map I set icons!
set ignorecase true
map <bs2> set hidden!
# set icons		# Enable icons. Requires nerd fonts and LF_ICONS variable.

# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"


cmd on-cd &{{
               # display git repository status in your prompt
               # source /usr/share/git/completion/git-prompt.sh
               # GIT_PS1_SHOWDIRTYSTATE=auto
               # GIT_PS1_SHOWSTASHSTATE=auto
               # GIT_PS1_SHOWUNTRACKEDFILES=auto
               # GIT_PS1_SHOWUPSTREAM=auto
               # git=$(__git_ps1 " (%s)") || true
               fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[1m%f$git\033[0m"
               lf -remote "send $id set promptfmt \"$fmt\""
           }}


cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*) $EDITOR $fx;;
	image/x-xcf)
			setsid -f gimp $f >/dev/null 2>&1 ;;
	image/svg+xml)
			display -- $f ;;
	image/*)
			rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | setsid -f sxiv -aio 2>/dev/null | lf-select & ;;
	audio/*)
			mpv --audio-display=no $f ;;
	video/*)
			setsid -f mpv --autofit=1050x700  $f ;;
	application/pdf|application/vnd*|application/epub*)
			setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/pgp-encrypted)
			$EDITOR $fx ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac


# Custom Functions
# cmd open ${{
#     case $(file --mime-type "$f" -bL) in
#         text/*|application/json) $EDITOR "$f";;
# 			video/*)mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)  --autofit=1050x700 -- "$f";;
# 			audio/*)mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)  --autofit=1050x700 -- "$f" ;;
# 			image) xdg-open "$f";;
# 			pdf) zathura "$f";;
# 			*.mht|*.mhtml) luakit "$f";;
#         *) xdg-open "$f" ;;
#     esac
# }}
# # map H set hidden true
# # Custom Functions

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %cp "$f" ~/.config/wall.png && nitrogen --set-scaled "$f"

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd cpdragon %cpdragon
cmd mvdragon %mvdragon
cmd dlfile %dlfile

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# cmd bulkrename ${{
#     vidir
# }}
cmd bulkrename $vidir

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd cd_drives ${{

	DIR=$(mount | grep "/dev/sda1" | cut -d" " -f 3);
	cd $DIR


}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}






cmd stripspace %stripspace "$f"




# Remove some defaults
map m
map o
# map n
# map "'"
# map '"'
map d
map c
map e
map f

# File Openers
map ee $$EDITOR "$f"
# map i $view "$f"
# map q %pwd  $cd

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
# map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping

# Dragon Mapping
map dr dragon
map dm mvdragon
map dc cpdragon
map dl dlfile

map ss stripspace

# Basic Functions
map . set hidden!
map D delete
map p paste
map x cut
map X unarchive
map Z zip
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
# map bg setwallpaper
map o open_config
map O  $SHELL mpv --no-config --hdr-compute-peak=no --tone-mapping=reinhard --tone-mapping-param=0.6 $f

map br $vimv $fx
# map r rename
map K top
map J bottom
# map R reload
map C clear
map u unselect
map va selectall
map <esc> clear
# map U reverse!
# Movement
map gp cd ~/Python_Scripting
map ge cd ~/Entertainment
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share
####----Shortcuts----####
map g2 cd ~/2020
map ga cd ~/Courses/Bash/Linux Bash Shell Scripting Complete Guide (incl. AWK  SED)/8. AWK
map gl cd /home/shahid/Luke_Smith
map ga cd ~/Entertainment/Animes/
map g4 cd ~/4Mins_Book
map gs cd ~/Screen_Cast
map gc cd ~/Cheatsheets
map gC cd ~/Courses
map go cd ~/Others_config


map gL cd ~/Latex
map gy cd ~/Videos/Islamic/Yasir_qadi
map gw cd ~/backgrounds/
map gW cd ~/Wikipedia-Offline
map gv cd ~/Videos
map gS cd ~/.config/sublime-text-3/Packages
map gP cd ~/PythonScripting
map gG cd ~/Courses/Go_Lang
map gj cd ~/June
map gB cd ~/.local/bin
map gb cd ~/Books
map gt cd ~/Turkey
map gd cd ~/Downloads
map gD cd ~/.config/
map gn cd ~/.config/nvim
map cp copy_file_path
map cn copy_name
map M mark-save
map S $$SHEL
# map ' mark-load
map gm cd /home/shahid/Courses/MIT-OCW



cmd copy_name ${{
	clear;
	echo "$f" |  xclip -selection clipboard -i

	}}

cmd copy_file_path ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "$f" |  xclip -selection clipboard -i
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(cut -d'	' -f2- ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf | sed 's|~|$HOME|' )" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

map C copyto

map R push A<c-u> # new rename
map A rename # at the very beginning
map r push A<a-b><a-b><a-f> # before extention
# map a push A<a-b> # after extention

map bg  $setbg "$f"
map bw  $wal -i %f && setbg %f
map cW  bulkrename
map <c-f> $lf -remote "send $id select '$(fzf)'"
map f $lf -remote "send $id select '$(fzf)'"
# map J $lf -remote "send $id cd $(cut -d'	' -f2 ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)"
